#!/usr/bin/env bash
set -eu -o pipefail;

readonly repo_dir="$( cd $(dirname ${BASH_SOURCE})/..; pwd )";

cd "${repo_dir}"

WMD_GENERATE_SOURCE_FORCE=true bin/generate-source

# Check for git changes.
echo -e "\nChecking git status\n"
GIT_STATUS_LINES="$(git status --porcelain=v1 | tee /dev/stderr | wc -l)"
if [ "${GIT_STATUS_LINES}" -ne "0" ]; then
    cat <<EOF

Error: 'git status' shows changes in the local worktree or git index.
Commit or stash your changes.

EOF
    exit 1
fi

PKG_VERSION="$(tomato --format raw get 'workspace.package.version' Cargo.toml)"

echo "PKG_VERSION = ${PKG_VERSION} (from workspace Cargo.toml)"
echo -e "\nChecking git tag\n"

TAG_NAME="v${PKG_VERSION}"
TAG_STATUS_EXPECTED="$(git rev-parse HEAD)"$'\t'"refs/tags/${TAG_NAME}"
TAG_STATUS="$(git ls-remote . --tags "${TAG_NAME}" | tee /dev/stderr)"

# Check git tag commit is current HEAD commit
if [ "${TAG_STATUS_EXPECTED}" != "${TAG_STATUS}" ]; then
    cat <<EOF

Error: Tag commit hash is wrong.

The checked out commit is not the tagged commit.
Try checking out the tag, updating the tag, or updating the workspace version and creating a new tag.

Expected: ${TAG_STATUS_EXPECTED} (based on current HEAD and package version)
Local:    ${TAG_STATUS} (tag in local repo)

EOF
    exit 1
fi

cat <<EOF
Local git tag OK

Checking git remote 'origin'

EOF

TAG_ORIGIN_STATUS="$(git ls-remote origin --tags "${TAG_NAME}" | tee /dev/stderr)"

# Check git tag is correct on the remote 'origin'.
if [ "${TAG_ORIGIN_STATUS}" != "${TAG_STATUS}" ]; then
    cat <<EOF

Error: On remote 'origin' tag commit hash is wrong.

The local tag does not match the remote tag.
Either force update the local or remote tag.

Expected: ${TAG_STATUS_EXPECTED}   (based on current HEAD and package version)
Local:    ${TAG_STATUS}   (tag in local repo)
origin:   ${TAG_ORIGIN_STATUS}   (tag in remote repo)

EOF
    exit 1
fi

cat <<EOF

git status OK

Running builds to check the code

EOF

export RUSTFLAGS="$(tomato get 'build.rustflags' .cargo/config.toml | tr '\n' ' ') -D warnings"

# Set the target directory different from the standard path.
# Since we set `RUSTFLAGS` above, this build would invalidate
# all artifacts in the default `target/` path.
export CARGO_TARGET_DIR="target/publish"

bin/build
bin/test

WMD_DOC_OPEN_FORCE="false" \
bin/doc
